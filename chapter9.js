function Rectangle(w, h) {	this.width = w;	this.height = h;}var rect1 = new Rectangle(2, 4);var rect2 = new Rectangle(8.5, 11);function computeAreaOfRectangle(r) { return r.width * r.height; }var r = new Rectangle(8.5, 11);r.area = function() { return this.width * this.height; };var a = r.area();function Rectangle2(w, h) {	this.width = w;	this.height = h;	this.area = function( ) { return this.width * this.height; };}function Rectangle3(w, h) {	this.width = w;	this.height = h;}Rectangle3.prototype.area = function() { return this.width * this.height; };var r = new Rectangle(2, 3);r.hasOwnProperty("width");r.hasOwnProperty("area");String.prototype.endsWith = function(c) {	return (c == this.charAt(this.length - 1));};var message = "azaza";message.endsWith('h');message.endsWith('a');if (!Array.prototype.map) {	Array.prototype.map = function(f, thisObject) {		var results = [];		for(var len = this.length, i = 0; i < len; i++) {			results.push(f.call(thisObject, this[i], i, this));		}		return results;	};}function Circle(radius) {	this.r = radius;}var c = new Circle(1.0);c.r = 2.2;var a = c.area();var x = Math.exp(Circle.PI);var d = new Circle(1.2);var bigger = Circle.max(c,d);// Комплексные числа дохуяfunction Complex(real, imaginary) {	this.x = real;	this.y = imaginary;}Complex.prototype.magnitude = function() {	return Math.sqrt(this.x*this.x + this.y*this.y);};Complex.prototype.negative = function() {	return new Complex(this.x, this.y);};Complex.prototype.add = function(that) {	return new Complex(this.x + that.x, this.y + that.y);};Complex.prototype.multiply = function(that) {	return new Complex(this.x * that.x, this.y * that.y, this.x * that.y + this.y * that.x);};Complex.prototype.toString = function() {	return "{" + this.x + "," + this.y + "}";};Complex.prototype.equals = function(that) {	return this.x == that.x && this.y == that.y;};Complex.prototype.valueOf = function() {	return this.x;};Complex.add = function (a, b) {	return new Complex(a.x + b.x, a.y + b.y);};Complex.multiply = function (a, b) {	return new Complex(a.x * b.x, a.y * b.y, a.x * b.y + a.y * b.x);};Complex.ZERO = new Complex(0,0);Complex.ONE = new Complex(1,0);Complex.I = new Complex(0,1);function ImmutableRectangle(w, h) {	this.getWidth = function() {		return w;	};	this.getHeight = function() {		return h;	};}ImmutableRectangle.prototype.area = function( ) {	return this.getWidth( ) * this.getHeight( );};